version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: invoicegen-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-invoicegen}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-invoicegen_password}
      POSTGRES_DB: ${POSTGRES_DB:-invoicegen}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - invoicegen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-invoicegen}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # InvoiceGen Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: invoicegen-app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-invoicegen}:${POSTGRES_PASSWORD:-invoicegen_password}@postgres:5432/${POSTGRES_DB:-invoicegen}
      
      # Better Auth
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
      
      # Cloudflare R2
      CLOUDFLARE_R2_ACCOUNT_ID: ${CLOUDFLARE_R2_ACCOUNT_ID}
      CLOUDFLARE_R2_ACCESS_KEY_ID: ${CLOUDFLARE_R2_ACCESS_KEY_ID}
      CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${CLOUDFLARE_R2_SECRET_ACCESS_KEY}
      CLOUDFLARE_R2_BUCKET_NAME: ${CLOUDFLARE_R2_BUCKET_NAME}
      CLOUDFLARE_R2_ENDPOINT: ${CLOUDFLARE_R2_ENDPOINT}
      
      # Optional: Gemini AI
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      
      # Optional: Gmail SMTP
      GMAIL_EMAIL: ${GMAIL_EMAIL:-}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD:-}
      
      # Node Environment
      NODE_ENV: production
      
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - invoicegen-network
    volumes:
      # Mount for logs (optional)
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        npx prisma migrate deploy &&
        echo 'Database migrations completed!' &&
        node server.js
      "

networks:
  invoicegen-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

